Blogs:
1 baseball world series, topic_id: 1
2 superbowl, topic_id: 2
3 spring training, topic_id 1

Topics:
1 baseball, blog_id: 1, blog_id: 3
2 football, blog_id: 2

Does the topic own the Blog or does the Blog own the topic.
Topic owns the blog post.
The topic should have the ability to have many blog posts whereas the blog cannot have many topics

CUSTOM SCOPES: Custom database query
in the model you would include somthing like:
    scope :ruby_on_rails_portfolio_items, -> {where(subtitle: 'Ruby on Rails')}
then in the controller you could call it like:
    def index
      @portfolio_item = Portfolio.ruby_on_rails_portfolio_items

Custom scopes that you can call from the controller - considered to be best practice

You could create a file in the views under portfolio - call it ruby and insert whatever code you wish. So it would fit into the mcv architecture. You would need to create a route in routes.rb ie. get 'ruby-items', to 'portfolio#ruby'

after_initialize is after the def new action from the controller takes place. But not after the create.

Integrating Concerns:
  When you have functionality that doesn't fully fit inside a particular model or it would work across several models, that would be a good time to use a concern. This should not be confused with items that should be put inside of a helper module. Concerns should always deal with the data. Example would be that code for sending out sms messages, etc should not be put in a concern since it has nothing to do with data. Those items should be placed in the lib directory.

  Adding the badge to the skills model

  # def set_defaults
  #   self.main_image ||= 'https://dummyimage.com/600x400/000/fff&text=Company+Name'
  #   self.thumb_image ||= 'https://dummyimage.com/400x200/000/fff&text=Company+Name'
  #
  # end


  Jordan
  In Ruby's OOP syntax, 'super' brings in the parent's class behavior. And you can perform that type of behavior in Ruby in general. But it's not as common with other gems since you typically wouldn't want to accidentally override the default behavior. But if you'd like to know more, here are four guides on metaprogramming, which is similar to what we're doing:

  https://www.youtube.com/watch?v=lZfv4H-9ato

  https://www.youtube.com/watch?v=viGWLaSjR34

  https://www.youtube.com/watch?v=L3Y1LPasqEo

  https://www.youtube.com/watch?v=GC9ZXrtOU0M
